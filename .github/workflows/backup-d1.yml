name: Nightly D1 Backup to GitHub Releases

on:
  schedule:
    - cron: '17 5 * * *' # 05:17 UTC nightly
  workflow_dispatch:

permissions:
  contents: write    # needed for release create/upload
  actions: read

jobs:
  backup:
    runs-on: ubuntu-latest
    env:
      D1_NAME: resellapp
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Wrangler
        run: npm i -g wrangler@4

      - name: Show Wrangler and account info
        run: |
          set -euo pipefail
          wrangler --version
          echo "Listing D1 databases as a smoke test:"
          wrangler d1 list

      - name: Dump D1 database (.dump)
        run: |
          set -euo pipefail
          # Primary path: dump by database NAME (no --account-id flag to avoid CLI incompat errors)
          if wrangler d1 execute "$D1_NAME" --remote --command '.dump' > d1-backup.sql 2> dump_err.log; then
            :
          else
            echo "Primary dump failed, trying fallback via UUID…"
            DB_ID="$(wrangler d1 list --json | jq -r --arg N "$D1_NAME" '.[] | select(.name==$N) | (.uuid // .id // .database_id) // empty')"
            if [[ -z "$DB_ID" ]]; then
              echo "Could not resolve database ID for $D1_NAME"
              echo "---- dump_err.log ----"; sed -n '1,200p' dump_err.log || true
              exit 1
            fi
            wrangler d1 execute "$DB_ID" --remote --command '.dump' > d1-backup.sql
          fi

          # Quick sanity check and compress
          ls -l d1-backup.sql
          grep -q 'CREATE TABLE' d1-backup.sql || { echo "Backup file looks suspicious (no CREATE TABLE)."; head -n 100 d1-backup.sql || true; exit 1; }
          gzip -9f d1-backup.sql
          ls -l d1-backup.sql.gz
          echo "First 25 lines of the dump (uncompressed preview):"
          zcat d1-backup.sql.gz | head -n 25 || true

      - name: Publish to GitHub Release (tagged)
        run: |
          set -euo pipefail
          TS="$(date -u +'%Y%m%dT%H%M%SZ')"
          TAG="d1-backup-${TS}"
          TITLE="$TAG"
          NOTES="Automated D1 backup generated by GitHub Actions."
          # create release if missing, then upload (clobber if exists)
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "Release $TAG already exists, uploading asset…"
          else
            gh release create "$TAG" -t "$TITLE" -n "$NOTES"
          fi
          gh release upload "$TAG" d1-backup.sql.gz --clobber
